# -*- coding: utf-8 -*-
"""2Derivada bisect.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14pop1Rj7XL-dmtVK8_ztMUDyXUh-8K7M
"""

import numpy as np
import matplotlib.pyplot as plt

def poly(x, a=1, b=-2, c=-3):
    """
    Função polinomial de segundo grau.

    Parâmetros:
    x (float ou array): Valor(es) de x.
    a, b, c (float): Coeficientes do polinômio.

    Retorna:
    float ou array: Valor(es) do polinômio.
    """
    return a * x**2 + b * x + c

def bisect(func, a, b, eps=1e-3):
    """
    Método da bissecção para encontrar raízes de uma função.

    Parâmetros:
    func (function): Função para a qual a raiz será encontrada.
    a, b (float): Intervalo inicial [a, b].
    eps (float): Tolerância para o erro.

    Retorna:
    tuple: Intervalo contendo a raiz.
    """
    if func(a) * func(b) > 0:
        raise ValueError("A função deve ter sinais opostos em a e b.")

    delta = 100.0
    while delta > eps:
        x_med = (a + b) / 2
        if func(x_med) * func(a) <= 0:
            b = x_med
        else:
            a = x_med
        delta = abs(a - b)
        print(f"Intervalo: [{a}, {b}], Delta: {delta}")

    return a, b

# Exemplo de uso
if __name__ == "__main__":
    # Define o intervalo e a tolerância
    a, b = -2, 4
    eps = 1e-3

    # Encontra a raiz
    intervalo = bisect(poly, a, b, eps)
    print(f"Raiz encontrada no intervalo: {intervalo}")

    # Plota a função
    x = np.linspace(-2, 4, 101)
    y = poly(x)
    plt.plot(x, y, label="f(x)")
    plt.axhline(0, color="black", linestyle="--", linewidth=0.8)
    plt.scatter([intervalo[0], intervalo[1]], [poly(intervalo[0]), poly(intervalo[1])], color="red", label="Raiz")
    plt.grid()
    plt.legend()
    plt.title("Método da Bissecção")
    plt.xlabel("x")
    plt.ylabel("f(x)")
    plt.savefig("graficos/grafico_bisseccao.png")  # Salva o gráfico
    plt.show()