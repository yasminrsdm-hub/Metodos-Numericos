# -*- coding: utf-8 -*-
"""1Derivadaloglog.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FdNs0_iE-zb119P9vdNTdsto_68pd5Z5
"""

import matplotlib.pyplot as plt
import numpy as np

def derivada(func, x, h):
    """
    Calcula a derivada numérica de uma função usando três métodos: central, adiantada e atrasada.

    Parâmetros:
    func (function): A função a ser derivada.
    x (float ou array): O ponto ou pontos onde a derivada será calculada.
    h (float): O passo para o cálculo da derivada.

    Retorna:
    tuple: Uma tupla contendo as derivadas central, adiantada e atrasada.
    """
    central = (func(x + h) - func(x - h)) / (2 * h)
    adiantada = (func(x + h) - func(x)) / h
    atrasada = (func(x) - func(x - h)) / h
    return central, adiantada, atrasada

def erros(x, y):
    """
    Calcula o erro absoluto entre dois valores.

    Parâmetros:
    x (float ou array): Valor aproximado.
    y (float ou array): Valor exato.

    Retorna:
    float ou array: O erro absoluto.
    """
    with np.errstate(divide='ignore', invalid='ignore'):
        err = np.abs((x - y) / y)
        err[y == 0] = 0  # Define o erro como 0 quando y é zero
    return err

def plot_derivadas(func, h=0.1):
    """
    Plota a função e suas derivadas numéricas.

    Parâmetros:
    func (function): A função a ser derivada.
    h (float): O passo para o cálculo da derivada.
    """
    angulos = np.linspace(0, 2 * np.pi, 101)
    derivadas = derivada(func, angulos, h)

    plt.plot(angulos, func(angulos), label=f'{func.__name__}')
    plt.plot(angulos, derivadas[0], 's', label='central', alpha=0.5)
    plt.plot(angulos, derivadas[1], '^', label='adiantada', alpha=0.5)
    plt.plot(angulos, derivadas[2], 'o', label='atrasada', alpha=0.5)
    plt.legend()
    plt.grid()
    plt.title(f'Derivadas Numéricas (h = {h})')
    plt.xlabel('Ângulo (rad)')
    plt.ylabel('Valor')
    plt.show()

def test_derivada():
    """
    Testa a precisão dos métodos de derivada numérica.
    """
    x = 0
    h = 0.01
    central, adiantada, atrasada = derivada(np.sin, x, h)
    assert np.isclose(central, np.cos(x), atol=1e-4), "Derivada central incorreta"
    assert np.isclose(adiantada, np.cos(x), atol=1e-4), "Derivada adiantada incorreta"
    assert np.isclose(atrasada, np.cos(x), atol=1e-4), "Derivada atrasada incorreta"
    print("Testes passaram com sucesso!")

# Exemplo de uso
if __name__ == "__main__":
    # Parâmetros
    angulos = np.linspace(0, 2 * np.pi, 101)
    h = 0.2

    # Calcula as derivadas da função seno
    derivadas = derivada(np.sin, angulos, h)

    # Plota as derivadas
    plot_derivadas(np.sin, h)

    # Calcula e plota os erros em função de h
    H = [1, 0.8, 0.5, 0.2, 0.1, 0.05, 0.01, 0.005, 0.001]
    err_central = []
    err_adiantado = []

    for h_val in H:
        derivs_1 = derivada(np.sin, np.pi, h_val)
        derivs_2 = derivada(np.sin, np.pi / 2.0, h_val)
        err_1 = abs(derivs_1[0] - np.cos(np.pi))
        err_2 = abs(derivs_2[1] - np.cos(np.pi / 2.0))
        err_central.append(err_1)
        err_adiantado.append(err_2)

    plt.loglog(H, err_central, label="central")
    plt.loglog(H, err_adiantado, label="adiantado")
    plt.legend()
    plt.title('Erro das Derivadas em Função de h')
    plt.xlabel('h')
    plt.ylabel('Erro Absoluto')
    plt.grid()
    plt.show()

    # Executa os testes
    test_derivada()