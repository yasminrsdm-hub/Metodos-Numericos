# -*- coding: utf-8 -*-
"""4Met_Secante.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oUM9NWj5FeLgqvpAUTpwraByQk-Izlk7
"""

import numpy as np

# Método da Secante
def secante(func, x0, x1, eps):
    """
    Método da Secante para encontrar a raiz de uma função.

    Parâmetros:
        func (function): Função para a qual a raiz será encontrada.
        x0 (float): Primeiro chute inicial.
        x1 (float): Segundo chute inicial.
        eps (float): Tolerância para o erro.

    Retorna:
        float: Aproximação da raiz.
    """
    erro = 1e5
    while erro >= eps:
        num = func(x0)
        denom = (func(x0) - func(x1)) / (x0 - x1)
        x2 = x0 - num / denom
        erro = abs(x1 - x2)
        print(f"Erro: {erro}")
        x0, x1 = x1, x2
    return x2

# Função de exemplo: x^2 - 4
def poly(x):
    return x**2 - 4

# Aplicando o Método da Secante
raiz = secante(poly, x0=3.1, x1=3.0, eps=1e-3)
print(f"Raiz encontrada: {raiz}")

# Método dos Pontos Fixos
def ponto_fixo(func, x0, eps):
    """
    Método dos Pontos Fixos para encontrar o ponto fixo de uma função.

    Parâmetros:
        func (function): Função para a qual o ponto fixo será encontrado.
        x0 (float): Chute inicial.
        eps (float): Tolerância para o erro.

    Retorna:
        float: Aproximação do ponto fixo.
    """
    delta = 1e5
    while delta > eps:
        x_novo = func(x0)
        delta = abs(x0 - x_novo)
        x0 = x_novo
        print(f"Diferença: {delta}")
    return x_novo

# Aplicando o Método dos Pontos Fixos para sin(x)
x0 = 2.0
eps = 1.0e-5
solucao = ponto_fixo(np.sin, x0, eps)
print(f"Solução encontrada: {solucao}")