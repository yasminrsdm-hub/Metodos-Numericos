# -*- coding: utf-8 -*-
"""Métodos Simples, Trapézio e Simpson

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1StM3qZ5MKGB35ob78U-xk-vpG6uLqLqG
"""

import numpy as np
import matplotlib.pyplot as plt

# Funções de exemplo
def func_1(x):
    return x**2

def func_2(x):
    return np.sin(x)

def func_3(x):
    return np.exp(-x)

# Método Simples (Soma de Retângulos)
def integral_simples(func, a, b, N):
    dx = (b - a) / N
    x = np.linspace(a, b, N+1)
    integral = np.sum(func(x[:-1])) * dx
    return integral

# Método do Trapézio
def trapezio(func, a, b, N):
    x = np.linspace(a, b, N+1)
    h = (b - a) / N
    integral = (func(a) + func(b)) / 2.0 + np.sum(func(x[1:-1]))
    return integral * h

# Método de Simpson
def simpson(func, a, b, N):
    if N % 2 != 0:
        raise ValueError("N deve ser par para o método de Simpson.")
    h = (b - a) / N
    x = np.linspace(a, b, N+1)
    f = func(x)
    soma_impares = np.sum(f[1:-1:2])
    soma_pares = np.sum(f[2:-1:2])
    integral = (h / 3) * (f[0] + 4 * soma_impares + 2 * soma_pares + f[-1])
    return integral

# Testes e Comparações
# Integral de x^2 de 0 a 1 (valor exato: 1/3)
N = 100
print("Método Simples:", integral_simples(func_1, 0, 1, N))
print("Método do Trapézio:", trapezio(func_1, 0, 1, N))
print("Método de Simpson:", simpson(func_1, 0, 1, N))
print("Valor Exato:", 1/3)

# Integral de sin(x) de 0 a 2*pi (valor exato: 0)
N = 100
print("\nMétodo Simples:", integral_simples(func_2, 0, 2*np.pi, N))
print("Método do Trapézio:", trapezio(func_2, 0, 2*np.pi, N))
print("Método de Simpson:", simpson(func_2, 0, 2*np.pi, N))
print("Valor Exato:", 0)

# Integral de exp(-x) de 0 a 1 (valor exato: 1 - 1/e)
N = 100
exato = 1 - 1/np.exp(1)
print("\nMétodo Simples:", integral_simples(func_3, 0, 1, N))
print("Método do Trapézio:", trapezio(func_3, 0, 1, N))
print("Método de Simpson:", simpson(func_3, 0, 1, N))
print("Valor Exato:", exato)