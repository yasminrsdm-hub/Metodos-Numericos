# -*- coding: utf-8 -*-
"""newton raphson.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F_oZzpBedB-N0LyRFzNSIBC6jmI_qPf_
"""

---

#### 3. **Código do Método de Newton-Raphson**

Salve o código abaixo em `metodos_numericos/newton_raphson/newton_raphson.py`:

```python
import numpy as np
import matplotlib.pyplot as plt

def poly(x, a=1, b=-2, c=-3):
    """
    Função polinomial de segundo grau.

    Parâmetros:
    x (float ou array): Valor(es) de x.
    a, b, c (float): Coeficientes do polinômio.

    Retorna:
    float ou array: Valor(es) do polinômio.
    """
    return a * x**2 + b * x + c

def dpoly(x, a=1, b=-2):
    """
    Derivada da função polinomial de segundo grau.

    Parâmetros:
    x (float ou array): Valor(es) de x.
    a, b (float): Coeficientes do polinômio.

    Retorna:
    float ou array: Valor(es) da derivada.
    """
    return 2 * a * x + b

def newton(func, dfunc, x_0, eps=1e-3):
    """
    Método de Newton-Raphson para encontrar raízes de uma função.

    Parâmetros:
    func (function): Função para a qual a raiz será encontrada.
    dfunc (function): Derivada da função.
    x_0 (float): Valor inicial.
    eps (float): Tolerância para o erro.

    Retorna:
    float: Raiz encontrada.
    """
    delta = 1e3
    x_i = x_0
    while delta >= eps:
        x = x_i - func(x_i) / dfunc(x_i)
        delta = abs(x - x_i)
        print(f"Iteração: x = {x}, Delta = {delta}")
        x_i = x
    return x_i

# Exemplo de uso
if __name__ == "__main__":
    # Define o valor inicial e a tolerância
    x_0 = -2
    eps = 1e-3

    # Encontra a raiz
    raiz = newton(poly, dpoly, x_0, eps)
    print(f"Raiz encontrada: {raiz}")

    # Plota a função
    x = np.linspace(-2, 4, 101)
    y = poly(x)
    plt.plot(x, y, label="f(x)")
    plt.axhline(0, color="black", linestyle="--", linewidth=0.8)
    plt.scatter(raiz, poly(raiz), color="red", label="Raiz")
    plt.grid()
    plt.legend()
    plt.title("Método de Newton-Raphson")
    plt.xlabel("x")
    plt.ylabel("f(x)")
    plt.savefig("graficos/grafico_newton.png")  # Salva o gráfico
    plt.show()