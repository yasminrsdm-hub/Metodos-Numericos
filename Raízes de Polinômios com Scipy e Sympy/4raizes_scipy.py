# -*- coding: utf-8 -*-
"""4Raizes_Scipy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qtSLqgNCxYGFNdfu-qi00m9x2HNw9jCA
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import newton, bisect
import sympy as sp

# Definindo símbolos
x = sp.symbols('x')

# Definindo a função polinomial
y = (x - 2) * (x - 3) * (x + 1)
print("Função polinomial original:")
print(y)

# Expandindo a função polinomial
expanded_y = sp.expand(y)
print("\nFunção polinomial expandida:")
print(expanded_y)

# Definindo as funções numéricas para uso com scipy
def poly(x):
    return x**3 - 4*x**2 + x + 6

def dpoly(x):
    return 3*x**2 - 8*x + 1

# Encontrando raízes usando o método de Newton
root1 = newton(poly, -5, dpoly, tol=1e-5)
root2 = newton(poly, 1, dpoly)
print("\nRaízes encontradas usando o método de Newton:")
print(f"Raiz 1: {root1}")
print(f"Raiz 2: {root2}")

# Resolvendo a equação simbolicamente
roots = sp.solve(expanded_y, x)
print("\nRaízes encontradas simbolicamente:")
print(roots)

# Definindo uma nova função polinomial
g = x**3 + 4*x**2 - x + 6
print("\nNova função polinomial:")
print(g)

# Resolvendo a nova equação simbolicamente
roots_g = sp.solve(g, x)
print("\nRaízes da nova função polinomial:")
print(roots_g)

# Definindo as funções numéricas para a nova função polinomial
def polyc(x):
    return x**3 + 4*x**2 - x + 6

def dpolyc(x):
    return 3*x**2 + 8*x - 1

# Encontrando raízes complexas usando o método de Newton
xx = complex(1, 1)  # 1 + 1j
zz = newton(polyc, xx, dpolyc)
print("\nRaiz complexa encontrada usando o método de Newton (inicialização com 1 + 1j):")
print(zz)
print(f"Valor da função na raiz: {polyc(zz)}")

xx = complex(4, -3)  # 4 - 3j
zz = newton(polyc, xx, dpolyc)
print("\nRaiz complexa encontrada usando o método de Newton (inicialização com 4 - 3j):")
print(zz)
print(f"Valor da função na raiz: {polyc(zz)}")